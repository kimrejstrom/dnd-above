// Generated by https://quicktype.io

export interface Background {
  _meta: Meta;
  background: BackgroundElement[];
}

export interface Meta {
  internalCopies: string[];
}

export interface BackgroundElement {
  name: string;
  source: string;
  page: number;
  srd?: boolean;
  entries?: BackgroundEntry[];
  skillProficiencies?: SkillProficiency[];
  languageProficiencies?: LanguageProficiency[];
  toolProficiencies?: ToolProficiency[];
  additionalSources?: Source[];
  _copy?: Copy;
  otherSources?: Source[];
}

export interface Copy {
  name: string;
  source: SourceEnum;
  _mod: Mod;
}

export interface Mod {
  entries: EntriesEntry[] | EntriesClass;
}

export interface EntriesEntry {
  mode: Mode;
  replace?: string;
  items: ItemsElement;
  index?: number;
}

export interface ItemsElement {
  name: Name;
  type: ItemType;
  entries?: string[];
  data?: ItemData;
  entry?: string;
}

export interface ItemData {
  isFeature: boolean;
}

export enum Name {
  Equipment = 'Equipment',
  FeatureRetainers = 'Feature: Retainers',
  Language = 'Language',
  Languages = 'Languages',
  SkillProficiencies = 'Skill Proficiencies',
  ToolProficiencies = 'Tool Proficiencies',
  ToolProficiency = 'Tool Proficiency',
  VariantNobleKnight = 'Variant Noble (Knight)',
}

export enum ItemType {
  Entries = 'entries',
  Item = 'item',
}

export enum Mode {
  InsertArr = 'insertArr',
  ReplaceArr = 'replaceArr',
}

export interface EntriesClass {
  mode: Mode;
  index?: number;
  items: PurpleItem[] | ItemsClass;
  replace?: ReplaceClass | string;
}

export interface PurpleItem {
  name: string;
  type: ItemType;
  entries: Array<PurpleEntry | string>;
  data?: ItemData;
}

export interface PurpleEntry {
  type: PurpleType;
  caption?: string;
  colLabels?: string[];
  colStyles?: ColStyle[];
  rows?: Array<string[]>;
  name?: string;
  entries?: string[];
}

export enum ColStyle {
  Col10 = 'col-10',
  Col11 = 'col-11',
  Col1TextCenter = 'col-1 text-center',
  Col2TextCenter = 'col-2 text-center',
  Col4 = 'col-4',
  Col5 = 'col-5',
  Col6 = 'col-6',
  Col6TextCenter = 'col-6 text-center',
  Col7 = 'col-7',
  TextCenterCol2 = 'text-center col-2',
}

export enum PurpleType {
  Entries = 'entries',
  List = 'list',
  Section = 'section',
  Table = 'table',
}

export interface ItemsClass {
  name?: string;
  type: PurpleType;
  entries?: string[];
  data?: ItemData;
  style?: Style;
  items?: FluffyItem[];
}

export interface FluffyItem {
  type: ItemType;
  name: Name;
  entry: string;
}

export enum Style {
  ListHangNotitle = 'list-hang-notitle',
}

export interface ReplaceClass {
  index: number;
}

export enum SourceEnum {
  Phb = 'PHB',
  Uawge = 'UAWGE',
}

export interface Source {
  source: SourceEnum;
  page: number;
}

export interface BackgroundEntry {
  type: PurpleType;
  style?: Style;
  items?: ItemsElement[];
  name?: string;
  entries?: Array<FluffyEntry | string>;
  data?: EntryData;
  caption?: string;
  colLabels?: string[];
  colStyles?: string[];
  rows?: Array<string[]>;
}

export interface EntryData {
  isFeature: boolean;
  isAlternateFeature?: boolean;
}

export interface FluffyEntry {
  type: FluffyType;
  colLabels?: string[];
  colStyles?: ColStyle[];
  rows?: Array<Array<number | string>>;
  caption?: string;
  name?: string;
  entries?: Array<TentacledEntry | string>;
}

export interface TentacledEntry {
  type: PurpleType;
  caption: string;
  colLabels: string[];
  colStyles: ColStyle[];
  rows: Array<string[]>;
}

export enum FluffyType {
  Entries = 'entries',
  Inset = 'inset',
  Table = 'table',
}

export interface LanguageProficiency {
  anyStandard?: number;
  choose?: LanguageProficiencyChoose;
  dwarvish?: boolean;
  draconic?: boolean;
  undercommon?: boolean;
  other?: boolean;
  giant?: boolean;
  elvish?: boolean;
}

export interface LanguageProficiencyChoose {
  from: string[];
}

export interface SkillProficiency {
  insight?: boolean;
  religion?: boolean;
  history?: boolean;
  survival?: boolean;
  intimidation?: boolean;
  deception?: boolean;
  athletics?: boolean;
  'animal handling'?: boolean;
  perception?: boolean;
  performance?: boolean;
  'sleight of hand'?: boolean;
  choose?: SkillProficiencyChoose;
  nature?: boolean;
  persuasion?: boolean;
  stealth?: boolean;
  acrobatics?: boolean;
  investigation?: boolean;
  medicine?: boolean;
  arcana?: boolean;
}

export interface SkillProficiencyChoose {
  from: string[];
  count?: number;
}

export interface ToolProficiency {
  choose?: SkillProficiencyChoose;
  'disguise kit'?: boolean;
  'gaming set'?: boolean;
  'vehicles (land)'?: boolean;
  'forgery kit'?: boolean;
  "artisan's tools"?: boolean;
  "thieves' tools"?: boolean;
  'vehicles (water)'?: boolean;
  'musical instrument'?: boolean;
  "poisoner's kit"?: boolean;
  'herbalism kit'?: boolean;
  "alchemist's supplies"?: boolean;
  "tinker's tools"?: boolean;
  "brewer's supplies"?: boolean;
  "cook's utensils"?: boolean;
  'vehicles (air)'?: boolean;
  "navigator's tools"?: boolean;
  "calligrapher's supplies"?: boolean;
  "carpenter's tools"?: boolean;
}
