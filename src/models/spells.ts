// Generated by https://quicktype.io

export interface Spell {
  spell: SpellElement[];
}

export interface SpellElement {
  name: string;
  source: BackgroundSource;
  page: number;
  srd?: boolean | string;
  level: number;
  school: School;
  time: Time[];
  range: Range;
  components: Components;
  duration: DurationElement[];
  entries: Array<PurpleEntry | string>;
  scalingLevelDice?: ScalingLevelDice;
  damageInflict?: string[];
  savingThrow?: OpposedCheck[];
  miscTags?: MiscTag[];
  areaTags?: AreaTag[];
  classes: Classes;
  backgrounds?: Background[];
  entriesHigherLevel?: EntriesHigherLevel[];
  races?: Race[];
  meta?: Meta;
  conditionInflict?: string[];
  damageResist?: string[];
  spellAttack?: SpellAttack[];
  opposedCheck?: OpposedCheck[];
  damageVulnerable?: string[];
  damageImmune?: string[];
}

export enum AreaTag {
  C = 'C',
  H = 'H',
  L = 'L',
  MT = 'MT',
  N = 'N',
  Q = 'Q',
  R = 'R',
  S = 'S',
  St = 'ST',
  W = 'W',
  Y = 'Y',
}

export interface Background {
  name: BackgroundName;
  source: BackgroundSource;
}

export enum BackgroundName {
  Artificer = 'Artificer',
  ArtificerRevisited = 'Artificer (Revisited)',
  AzoriusFunctionary = 'Azorius Functionary',
  Barbarian = 'Barbarian',
  Bard = 'Bard',
  BorosLegionnaire = 'Boros Legionnaire',
  Cleric = 'Cleric',
  DimirOperative = 'Dimir Operative',
  Druid = 'Druid',
  Fighter = 'Fighter',
  GolgariAgent = 'Golgari Agent',
  GruulAnarch = 'Gruul Anarch',
  IzzetEngineer = 'Izzet Engineer',
  OrzhovRepresentative = 'Orzhov Representative',
  Paladin = 'Paladin',
  RakdosCultist = 'Rakdos Cultist',
  Ranger = 'Ranger',
  RangerRevised = 'Ranger (Revised)',
  SelesnyaInitiate = 'Selesnya Initiate',
  SimicScientist = 'Simic Scientist',
  Sorcerer = 'Sorcerer',
  Warlock = 'Warlock',
  Wizard = 'Wizard',
}

export enum BackgroundSource {
  Erlw = 'ERLW',
  Ggr = 'GGR',
  Phb = 'PHB',
  UAArtificer = 'UAArtificer',
  UAArtificerRevisited = 'UAArtificerRevisited',
  UATheRangerRevised = 'UATheRangerRevised',
}

export interface Classes {
  fromClassList: Background[];
  fromClassListVariant?: Background[];
  fromSubclass?: FromSubclass[];
}

export interface FromSubclass {
  class: Background;
  subclass: Subclass;
}

export interface Subclass {
  name: string;
  source: string;
  subSubclass?: string;
}

export interface Components {
  v?: boolean;
  s?: boolean;
  m?: MClass | string;
}

export interface MClass {
  text: string;
  cost?: number;
  consume?: boolean;
}

export interface DurationElement {
  type: FluffyType;
  duration?: DurationDuration;
  concentration?: boolean;
  ends?: End[];
}

export interface DurationDuration {
  type: PurpleType;
  amount: number;
  upTo?: boolean;
}

export enum PurpleType {
  Day = 'day',
  Hour = 'hour',
  Minute = 'minute',
  Round = 'round',
}

export enum End {
  Dispel = 'dispel',
  Trigger = 'trigger',
}

export enum FluffyType {
  Instant = 'instant',
  Permanent = 'permanent',
  Special = 'special',
  Timed = 'timed',
}

export interface PurpleEntry {
  type: EntryType;
  name?: string;
  entries?: Array<FluffyEntry | string>;
  caption?: string;
  colLabels?: string[];
  colStyles?: string[];
  rows?: Array<Array<RowClass | string>>;
  items?: string[];
}

export interface FluffyEntry {
  type: EntryType;
  items: string[];
}

export enum EntryType {
  Entries = 'entries',
  List = 'list',
  Table = 'table',
}

export interface RowClass {
  type: RowType;
  roll: Roll;
}

export interface Roll {
  exact?: number;
  min?: number;
  max?: number;
  pad?: boolean;
}

export enum RowType {
  Cell = 'cell',
}

export interface EntriesHigherLevel {
  type: EntryType;
  name: EntriesHigherLevelName;
  entries: string[];
}

export enum EntriesHigherLevelName {
  AtHigherLevels = 'At Higher Levels',
}

export interface Meta {
  ritual: boolean;
}

export enum MiscTag {
  Hl = 'HL',
  Prm = 'PRM',
  Scl = 'SCL',
  Sgt = 'SGT',
  Smn = 'SMN',
}

export enum OpposedCheck {
  Charisma = 'charisma',
  Constitution = 'constitution',
  Dexterity = 'dexterity',
  Intelligence = 'intelligence',
  Strength = 'strength',
  Wisdom = 'wisdom',
}

export interface Race {
  name: string;
  source: BaseSourceEnum;
  baseName?: BaseName;
  baseSource?: BaseSourceEnum;
}

export enum BaseName {
  Aasimar = 'Aasimar',
  Dwarf = 'Dwarf',
  ELF = 'Elf',
  ELFZendikar = 'Elf (Zendikar)',
  Genasi = 'Genasi',
  Gith = 'Gith',
  Gnome = 'Gnome',
  HalfELF = 'Half-Elf',
  HalfOrc = 'Half-Orc',
  Halfling = 'Halfling',
  Human = 'Human',
  Tiefling = 'Tiefling',
}

export enum BaseSourceEnum {
  Dmg = 'DMG',
  Eepc = 'EEPC',
  Erlw = 'ERLW',
  Mtf = 'MTF',
  Phb = 'PHB',
  Psx = 'PSX',
  Psz = 'PSZ',
  Scag = 'SCAG',
  UAELFSubraces = 'UAElfSubraces',
  UAEladrinAndGith = 'UAEladrinAndGith',
  UAFiendishOptions = 'UAFiendishOptions',
  UAThatOldBlackMagic = 'UAThatOldBlackMagic',
  Vgm = 'VGM',
}

export interface Range {
  type: RangeType;
  distance?: Distance;
}

export interface Distance {
  type: DistanceType;
  amount?: number;
}

export enum DistanceType {
  Feet = 'feet',
  Miles = 'miles',
  Self = 'self',
  Sight = 'sight',
  Touch = 'touch',
  Unlimited = 'unlimited',
}

export enum RangeType {
  Cone = 'cone',
  Cube = 'cube',
  Hemisphere = 'hemisphere',
  Line = 'line',
  Point = 'point',
  Radius = 'radius',
  Special = 'special',
  Sphere = 'sphere',
}

export interface ScalingLevelDice {
  label: string;
  scaling: { [key: string]: string };
}

export enum School {
  A = 'A',
  C = 'C',
  D = 'D',
  E = 'E',
  I = 'I',
  N = 'N',
  T = 'T',
  V = 'V',
}

export enum SpellAttack {
  M = 'M',
  R = 'R',
}

export interface Time {
  number: number;
  unit: Unit;
  condition?: string;
}

export enum Unit {
  Action = 'action',
  Bonus = 'bonus',
  Hour = 'hour',
  Minute = 'minute',
  Reaction = 'reaction',
}
